// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220618181912_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("AccountPost", b =>
                {
                    b.Property<string>("LikedPostsIDPost")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LikesIDAccount")
                        .HasColumnType("varchar(767)");

                    b.HasKey("LikedPostsIDPost", "LikesIDAccount");

                    b.HasIndex("LikesIDAccount");

                    b.ToTable("AccountPost");
                });

            modelBuilder.Entity("Models.Endpoint.Account", b =>
                {
                    b.Property<string>("IDAccount")
                        .HasColumnType("varchar(767)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("IDUserRol")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequirePasswordReset")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IDAccount");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IDUserRol");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            IDAccount = "38B9F907-5961-4589-90E8-9EC020B7D40D",
                            CreatedAt = new DateTime(2022, 6, 18, 18, 19, 11, 564, DateTimeKind.Utc).AddTicks(5036),
                            Email = "angel.g.j.reyes@gmail.com",
                            IDUserRol = "38B9F907-5961-4589-90E8-9EC020B7D40D",
                            IsVerified = true,
                            PasswordHash = "40a914448eff394e9cb44b9042f2e48c52727a49a7ff2f5062bd199014003645",
                            RequirePasswordReset = false
                        });
                });

            modelBuilder.Entity("Models.Endpoint.Comment", b =>
                {
                    b.Property<string>("IDComment")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTimeUTC")
                        .HasColumnType("datetime");

                    b.Property<string>("IDAccount")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("IDPost")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("IDComment");

                    b.HasIndex("IDAccount");

                    b.HasIndex("IDPost");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Models.Endpoint.Post", b =>
                {
                    b.Property<string>("IDPost")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTimeUTC")
                        .HasColumnType("datetime");

                    b.Property<string>("IDAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDPost");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Models.Endpoint.Profile", b =>
                {
                    b.Property<string>("IDProfile")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("IDAccount")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginCity")
                        .HasColumnType("text");

                    b.HasKey("IDProfile");

                    b.HasIndex("IDAccount");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Models.Endpoint.Session", b =>
                {
                    b.Property<string>("IDSession")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("IDAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("SessionToken")
                        .HasColumnType("text");

                    b.HasKey("IDSession");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Models.Endpoint.UserRol", b =>
                {
                    b.Property<string>("IDUserRol")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("UserLevel")
                        .HasColumnType("int");

                    b.Property<string>("UserRolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRolPermisions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDUserRol");

                    b.ToTable("UserRol");

                    b.HasData(
                        new
                        {
                            IDUserRol = "38B9F907-5961-4589-90E8-9EC020B7D40D",
                            UserLevel = 10,
                            UserRolName = "Voluntario",
                            UserRolPermisions = "Permiso a interactuar como voluntario en la plataformaº"
                        },
                        new
                        {
                            IDUserRol = "74F61449-AFA3-4D38-BBDE-4CE2600732D6",
                            UserLevel = 0,
                            UserRolName = "Migrante",
                            UserRolPermisions = "Permiso a interactuar como migrante en la plataformaº"
                        });
                });

            modelBuilder.Entity("AccountPost", b =>
                {
                    b.HasOne("Models.Endpoint.Post", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsIDPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Endpoint.Account", null)
                        .WithMany()
                        .HasForeignKey("LikesIDAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Endpoint.Account", b =>
                {
                    b.HasOne("Models.Endpoint.UserRol", "UserRol")
                        .WithMany()
                        .HasForeignKey("IDUserRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRol");
                });

            modelBuilder.Entity("Models.Endpoint.Comment", b =>
                {
                    b.HasOne("Models.Endpoint.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Endpoint.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("IDPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Models.Endpoint.Profile", b =>
                {
                    b.HasOne("Models.Endpoint.Account", "Account")
                        .WithMany()
                        .HasForeignKey("IDAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Endpoint.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
